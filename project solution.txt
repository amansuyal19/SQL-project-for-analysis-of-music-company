SPOTIFY PROJECT SOLUTION -


1. Retrieve the names of all tracks that have more than 1 billion streams.

SELECT 
    *
FROM
    cleaned_dataset
WHERE
    stream > 1000000000



2.Find All tracks that belong to the album type `single`

SELECT 
    Track, Album_type
FROM
    cleaned_dataset
WHERE
    Album_type = 'single'


3. Get the total number of comments for tracks where `licensed = TRUE`.

SELECT 
    sum(Comments) as total_comments
FROM
    cleaned_dataset
WHERE
    Licensed = 'true'


4. Find all tracks that belong to the album type `single`.
 
SELECT 
    Track, Album_type
FROM
    cleaned_dataset
WHERE
    Album_type = 'single'

5. Count the total number of tracks by each artist.

SELECT 
    artist, COUNT(track)
FROM
    cleaned_dataset
GROUP BY 1
ORDER BY 2 DESC

### Medium Level
1. Calculate the average danceability of tracks in each album.

SELECT 
    Album, track, AVG(Danceability)
FROM
    cleaned_dataset
GROUP BY 1 , 2
ORDER BY 3 DESC


2. Find the top 5 tracks with the highest energy values.

SELECT 
    track,max(Energy) as highest_energy
FROM
    cleaned_dataset
    group by 1
ORDER BY 2 DESC
LIMIT 5


3. List all tracks along with their views and likes where `official_video = TRUE`.

SELECT 
    track,
    SUM(views) AS total_views,
    SUM(likes) AS total_likes,
    official_video
FROM
    cleaned_dataset
WHERE
    official_video = 'true'
GROUP BY 1
ORDER BY 2 , 3 DESC


4. For each album, calculate the total views of all associated tracks.

SELECT 
    Album, track, SUM(views) AS total_views
FROM
    cleaned_dataset
GROUP BY 1 , 2
ORDER BY 3 DESC


5. Retrieve the track names that have been streamed on Spotify more than YouTube.

SELECT 
    *
FROM
    (SELECT 
        track,
            COALESCE(SUM(CASE
                WHEN most_playedon = 'youtube' THEN stream
            END), 0) AS streamed_on_yt,
            COALESCE(SUM(CASE
                WHEN most_playedon = 'spotify' THEN stream
            END), 0) AS streamed_on_spotify
    FROM
        cleaned_dataset
    GROUP BY 1) AS t1
WHERE
    streamed_on_spotify > streamed_on_yt


### Advanced Level
1. Find the top 3 most-viewed tracks for each artist using window functions.

with ranking_artist as
(SELECT 
    artist, track, SUM(views),DENSE_RANK() OVER (PARTITION BY artist ORDER BY SUM(views) desc ) AS ranks
FROM
    cleaned_dataset
GROUP BY 1 , 2
ORDER BY 1, 3 DESC) 
SELECT 
    *
FROM
    ranking_artist
WHERE
    ranks < 4


2. Write a query to find tracks where the liveness score is above the average.

SELECT 
    *
FROM
    cleaned_dataset
WHERE
    Liveness > (SELECT 
            AVG(liveness)
        FROM
            cleaned_dataset)



3. Use a `WITH` clause to calculate the difference between the highest and lowest energy values for tracks in each album.

WITH cte AS (
SELECT 
    album,
    MAX(energy) AS highest_energy,
    MIN(energy) AS lowest_energy
FROM
    cleaned_dataset
GROUP BY 1)
SELECT 
    album, highest_energy - lowest_energy AS energy_diff
FROM
    cte
ORDER BY 2 DESC


4. Find tracks where the energy-to-liveness ratio is greater than 1.2.

SELECT 
    *
FROM
    (SELECT 
        track, ROUND(Energy / Liveness, 1) AS ratio
    FROM
        cleaned_dataset) AS cte
WHERE
    ratio > 1.2


5. Calculate the cumulative sum of likes for tracks ordered by the number of views, using window functions.
   

SELECT 
    track,
    views,
    likes,
    SUM(likes) OVER (ORDER BY views ) AS cumulative_likes
FROM  cleaned_dataset



